#include <Arduino.h>

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define BUZZER_PIN 19
#define BUTTON_PIN 21
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

const unsigned char dice1Bmp [] PROGMEM = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xf1, 0xff, 0xff, 0xff, 0x8f, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff, 0xf3, 0xdf, 0xff, 0xff, 0xff, 0xfb, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0x9f, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xc3, 0xff, 0xfd, 0xbf, 0xff, 0x81, 0xff, 0xfd, 0xbf, 0xff, 0x00, 0xff, 0xfd, 0xbf, 0xff, 0x00, 0xff, 0xfd, 0xbf, 0xff, 0x00, 0xff, 0xfd, 0xbf, 0xff, 0x00, 0xff, 0xfd, 0xbf, 0xff, 0x81, 0xff, 0xfd, 0xbf, 0xff, 0xc3, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xfb, 0xcf, 0xff, 0xff, 0xff, 0xf3, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0xf1, 0xff, 0xff, 0xff, 0x8f, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff };
const unsigned char dice2Bmp [] PROGMEM = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xf1, 0xff, 0xff, 0xff, 0x8f, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff, 0xf3, 0xdf, 0xff, 0xff, 0xff, 0xfb, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xf0, 0x7f, 0xff, 0xfd, 0xbf, 0xe0, 0x3f, 0xff, 0xfd, 0xbf, 0xe0, 0x1f, 0xff, 0xfd, 0xbf, 0xe0, 0x1f, 0xff, 0xfd, 0xbf, 0xe0, 0x1f, 0xff, 0xfd, 0xbf, 0xe0, 0x3f, 0xff, 0xfd, 0xbf, 0xf0, 0x7f, 0xff, 0xfd, 0xbf, 0xfc, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xbf, 0xfd, 0xbf, 0xff, 0xfe, 0x0f, 0xfd, 0xbf, 0xff, 0xfc, 0x07, 0xfd, 0xbf, 0xff, 0xf8, 0x07, 0xfd, 0xbf, 0xff, 0xf8, 0x07, 0xfd, 0xbf, 0xff, 0xf8, 0x07, 0xfd, 0xbf, 0xff, 0xfc, 0x07, 0xfd, 0xbf, 0xff, 0xfe, 0x0f, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xfb, 0xcf, 0xff, 0xff, 0xff, 0xf3, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0xf1, 0xff, 0xff, 0xff, 0x8f, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff };
const unsigned char dice3Bmp [] PROGMEM = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0xff, 0xff, 0xff, 0x0f, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff, 0xf3, 0xcf, 0xff, 0xff, 0xff, 0xfb, 0xdf, 0xff, 0xff, 0xff, 0xf9, 0x9f, 0x87, 0xff, 0xff, 0xf9, 0x9f, 0x03, 0xff, 0xff, 0xfd, 0x9f, 0x01, 0xff, 0xff, 0xfd, 0x9e, 0x01, 0xff, 0xff, 0xfd, 0x9e, 0x01, 0xff, 0xff, 0xfd, 0x9f, 0x01, 0xff, 0xff, 0xfd, 0x9f, 0x03, 0xff, 0xff, 0xfd, 0x9f, 0x87, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xe1, 0xff, 0xfd, 0x9f, 0xff, 0xc0, 0xff, 0xfd, 0x9f, 0xff, 0x80, 0x7f, 0xfd, 0x9f, 0xff, 0x80, 0x7f, 0xfd, 0x9f, 0xff, 0x80, 0x7f, 0xfd, 0x9f, 0xff, 0x80, 0x7f, 0xfd, 0x9f, 0xff, 0xc0, 0xff, 0xfd, 0x9f, 0xff, 0xe1, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xf0, 0xfd, 0x9f, 0xff, 0xff, 0xe0, 0x7d, 0x9f, 0xff, 0xff, 0xc0, 0x3d, 0x9f, 0xff, 0xff, 0xc0, 0x3d, 0x9f, 0xff, 0xff, 0xc0, 0x3d, 0x9f, 0xff, 0xff, 0xc0, 0x3d, 0x9f, 0xff, 0xff, 0xe0, 0x7d, 0x9f, 0xff, 0xff, 0xf0, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xfb, 0xcf, 0xff, 0xff, 0xff, 0xf3, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff };
const unsigned char dice4Bmp [] PROGMEM = { 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xc7, 0xff, 0xff, 0xff, 0xe7, 0xdf, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0x0f, 0xff, 0xe0, 0xfd, 0x3e, 0x07, 0xff, 0xc0, 0x7d, 0x3c, 0x03, 0xff, 0xc0, 0x7d, 0x3c, 0x03, 0xff, 0xc0, 0x3d, 0x3c, 0x03, 0xff, 0xc0, 0x3d, 0x3e, 0x03, 0xff, 0xc0, 0x7d, 0x3e, 0x07, 0xff, 0xe0, 0x7d, 0x3f, 0x8f, 0xff, 0xf1, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0x8f, 0xff, 0xf1, 0xfd, 0x3e, 0x07, 0xff, 0xe0, 0x7d, 0x3e, 0x03, 0xff, 0xc0, 0x7d, 0x3c, 0x03, 0xff, 0xc0, 0x3d, 0x3c, 0x03, 0xff, 0xc0, 0x3d, 0x3c, 0x03, 0xff, 0xc0, 0x7d, 0x3e, 0x07, 0xff, 0xc0, 0x7d, 0x3f, 0x0f, 0xff, 0xe0, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xf3, 0xc7, 0xff, 0xff, 0xff, 0xe7, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x3f };
const unsigned char dice5Bmp [] PROGMEM = { 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xe7, 0xff, 0xff, 0xff, 0xe3, 0xcf, 0xff, 0xff, 0xff, 0xfb, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0x07, 0xff, 0xf0, 0x7c, 0xbe, 0x03, 0xff, 0xe0, 0x3c, 0xbe, 0x01, 0xff, 0xc0, 0x3c, 0xbe, 0x01, 0xff, 0xc0, 0x3c, 0xbe, 0x01, 0xff, 0xc0, 0x3c, 0xbe, 0x03, 0xff, 0xe0, 0x3c, 0xbf, 0x07, 0xff, 0xf0, 0x7c, 0xbf, 0xcf, 0xff, 0xf9, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0xbf, 0xff, 0xf3, 0xff, 0xfc, 0xbf, 0xff, 0xc1, 0xff, 0xfc, 0xbf, 0xff, 0x80, 0xff, 0xfc, 0xbf, 0xff, 0x80, 0x7f, 0xfc, 0xbf, 0xff, 0x80, 0x7f, 0xfc, 0xbf, 0xff, 0x80, 0x7f, 0xfc, 0xbf, 0xff, 0x80, 0xff, 0xfc, 0xbf, 0xff, 0xc1, 0xff, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0xbf, 0x07, 0xff, 0xf0, 0x7c, 0xbe, 0x03, 0xff, 0xe0, 0x3c, 0xbe, 0x01, 0xff, 0xc0, 0x3c, 0xbe, 0x01, 0xff, 0xc0, 0x3c, 0xbe, 0x01, 0xff, 0xc0, 0x3c, 0xbe, 0x03, 0xff, 0xe0, 0x3c, 0xbf, 0x07, 0xff, 0xf0, 0x7c, 0xbf, 0xff, 0xff, 0xff, 0xfc, 0xbf, 0xff, 0xff, 0xff, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xcf, 0xff, 0xff, 0xff, 0xfb, 0xe7, 0xff, 0xff, 0xff, 0xe3, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x3f };
const unsigned char dice6Bmp [] PROGMEM = { 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xc7, 0xff, 0xff, 0xff, 0xe7, 0xdf, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xbf, 0x8f, 0xff, 0xe3, 0xfd, 0x3f, 0x03, 0xff, 0xc0, 0xfd, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3f, 0x03, 0xff, 0xc0, 0xfd, 0x3f, 0x87, 0xff, 0xe1, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0x07, 0xff, 0xf3, 0xfd, 0x3e, 0x03, 0xff, 0xc0, 0xfd, 0x3e, 0x01, 0xff, 0x80, 0xfd, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3e, 0x03, 0xff, 0x80, 0x7d, 0x3f, 0x03, 0xff, 0x80, 0xfd, 0x3f, 0xcf, 0xff, 0xc1, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xff, 0xff, 0xff, 0xfd, 0x3f, 0xcf, 0xff, 0xff, 0xfd, 0x3f, 0x03, 0xff, 0xe1, 0xfd, 0x3e, 0x01, 0xff, 0xc0, 0xfd, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3e, 0x01, 0xff, 0x80, 0x7d, 0x3f, 0x03, 0xff, 0x80, 0x7d, 0x3f, 0x87, 0xff, 0xc0, 0xfd, 0xbf, 0xff, 0xff, 0xe1, 0xfd, 0x9f, 0xff, 0xff, 0xff, 0xf9, 0xdf, 0xff, 0xff, 0xff, 0xf3, 0xc7, 0xff, 0xff, 0xff, 0xe7, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x3f };
const unsigned char* diceImages[] PROGMEM = { dice1Bmp, dice2Bmp, dice3Bmp, dice4Bmp, dice5Bmp, dice6Bmp };

void playDownTone() {
  tone(BUZZER_PIN, 740, 300);
  delay(100);
  tone(BUZZER_PIN, 699, 300);
  delay(100);
  tone(BUZZER_PIN, 659, 600);
}

void playUpTone() {
  tone(BUZZER_PIN, 699, 200);
  delay(50);
  tone(BUZZER_PIN, 659, 200);
  delay(50);
  tone(BUZZER_PIN, 784, 500);
}

void drawState(int firstDiceValue, int secondDiceValue, int fromPosition, int toPosition) {
  oled.clearDisplay();
  oled.drawBitmap(12, 0, diceImages[firstDiceValue-1], 40, 40, WHITE);
  oled.drawBitmap(76, 0, diceImages[secondDiceValue-1], 40, 40, WHITE);
  oled.setTextSize(2); 
  oled.setTextColor(WHITE);
  oled.setCursor(20, 48);
  oled.println(fromPosition);
  oled.setCursor(53, 48);
  oled.println("->");
  oled.setCursor(85, 48);
  oled.println(toPosition);
  oled.display();
}

void setup() {
  Serial.begin(9600);
  Wire.begin(22, 23);
  if(!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  oled.clearDisplay();
  oled.setTextSize(2);
  oled.setTextColor(WHITE);
  oled.setCursor(20, 28);
  oled.println("LETS GO!");
  oled.display();
  
  pinMode(BUTTON_PIN, INPUT_PULLUP);
}

bool lastButtonState = HIGH;
int playerPosition = 1;

void loop() {
  int buttonState = digitalRead(BUTTON_PIN);
  if (lastButtonState == HIGH && buttonState == LOW) {
    int firstDiceValue = 1 + ( std::rand() % 6 );
    int secondDiceValue = 1 + ( std::rand() % 6 );
    int positionFrom = playerPosition;
    
    for (int i = 1; i <= firstDiceValue; i++) {
      tone(BUZZER_PIN, 523, 30);
      playerPosition += 1;
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
      delay(300);
    }

    delay(500);

    for (int i = 1; i <= secondDiceValue; i++) {
      tone(BUZZER_PIN, 523, 30);
      playerPosition += 1;
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
      delay(300);
    }

    if(playerPosition == 7) {
      playerPosition = 23;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 9) {
      playerPosition = 10;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 17) {
      playerPosition = 18;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 18) {
      playerPosition = 34;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 19) {
      playerPosition = 3;
      playDownTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 25) {
      playerPosition = 26;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 28) {
      playerPosition = 12;
      playDownTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 33) {
      playerPosition = 34;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 38) {
      playerPosition = 60;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 41) {
      playerPosition = 42;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 49) {
      playerPosition = 50;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 51) {
      playerPosition = 67;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 52) {
      playerPosition = 30;
      playDownTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 57) {
      playerPosition = 58;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition == 65) {
      playerPosition = 66;
      playUpTone();
      drawState(firstDiceValue, secondDiceValue, positionFrom, playerPosition);
    }

    if(playerPosition >= 73) {
      playerPosition = 34;
      oled.clearDisplay();
      oled.setCursor(5, 28);        // position to display
      oled.println("ROBOT WINS");
      oled.display();

      playUpTone();
      delay(200);
      playUpTone();
      delay(200);
      playUpTone();


      playerPosition = 1;
    }

  }
  lastButtonState = buttonState;
}
